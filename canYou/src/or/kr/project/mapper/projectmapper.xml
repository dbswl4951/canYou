<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="project">
	<!-- 모든 카테고리 목록 불러옴 -->
	<select id="casel" resultType="cvo">
		select * from category
	</select>

	<!-- 카테고리 번호를 통해 카테고리 이름을 가져옴 -->
	<select id="caselone" parameterType="int" resultType="String">
		select
		categoryName from category where categoryNo=#{categoryNo}
	</select>

	<!-- 선택한 카테고리에 따라서 서브 카테고리 불러옴 -->
	<select id="subcasel" parameterType="int" resultType="scvo">
		select *
		from subcategory where categoryNo=#{categoryNo}
	</select>

	<!-- 서브 카테고리 번호를 통해 이름을 가져옴 -->
	<select id="subcaselone" parameterType="int" resultType="String">
		select
		subCategoryName
		from subCategory
		where subCategoryNo=#{subCategoryNo}
	</select>

	<!-- 둘러보기 -->
	<select id="lookaround" resultType="cvo">
		select categoryno,
		categoryname
		from
		category
		order by categoryno
	</select>

	<!-- 회원 아이디로 회원 번호, 이름, 회원의 현재 금액을 가져옴 -->
	<select id="memname" parameterType="String" resultType="mvo">
		select
		memberNo, memberName, memberCash from member where
		memberId=#{memberId}
	</select>

	<!-- 회원 번호로 회원 이름을 가져옴 -->
	<select id="memname2" parameterType="int" resultType="mvo">
		select
		memberId, memberName,memberNo
		from member
		where memberNo=#{memberNo}
	</select>

	<!-- 프로젝트 업로드 -->
	<insert id="proin" parameterType="projvo">
		insert into project
		values(project_seq.nextVal,#{categoryNo},
		<if test="subCategoryNo==-1">null,</if>	<!-- 서브 카테고리 미등록일 경우(-1) null이 들어감 -->
		<if test="subCategoryNo!=-1">#{subCategoryNo},</if>
		#{memberNo}, #{projectName},
		#{projectCost}, sysdate,
		TO_DATE(#{projectStartDate}, 'yyyy-mm-dd'),
		TO_DATE(#{projectEndDate},'yyyy-mm-dd'),
		0, #{projectMainImage},
		#{projectStory},
		'Z', 1, 0)
		<selectKey keyProperty="projectNo" resultType="int"
			order="AFTER">
			SELECT project_seq.CURRVAL FROM dual
		</selectKey>

	</insert>

	<!-- 상품 추가 -->
	<insert id="prodin" parameterType="prodvo">
		insert into product
		values(product_seq.nextVal, #{productName}, #{productCnt},
		#{productInfo}, #{productCost}, #{projectNo})
	</insert>

	<!-- 프로젝트의 상품 목록 가져오기 -->
	<select id="prodsel" parameterType="String" resultType="prodvo">
		select *
		from product where projectNo=#{projectNo}
	</select>

	<!-- 개인정보 수정 1218 -->
	<update id="editinfo" parameterType="HashMap">
		update member
		<trim prefix="SET" suffixOverrides=",">
			<if test="targetPwd!='' and memberPwd!=''">memberPwd=#{memberPwd},</if>
			<if test="memberName != null">memberName=#{memberName},</if>
			<if test="memberAddr != null">memberAddr=#{memberAddr},</if>
			<if test="memberPhone != null">memberPhone=#{memberPhone},</if>
			<if test="memberEmail != null">memberEmail=#{memberEmail},</if>
			<if test="memberAge != null">memberAge=#{memberAge},</if>
			<if test="memberAccount != null">memberAccount=#{memberAccount},</if>
			<if test="memberImage != null">memberImage=#{memberImage},</if>
		</trim>
		where memberNo=#{memberNo}
		<if test="targetPwd!='' and memberPwd!=''">and memberPwd=#{targetPwd}</if>
	</update>

	<!-- 상품 가격 가져오기 -->
	<select id="prodcost" parameterType="int" resultType="int">
		select
		productCost from product where productNo=#{productNo}
	</select>

	<!-- 후원 추가 1 (행 추가) -->
	<insert id="donate" parameterType="dvo">
		<choose>
			<when test="productNo!=0">
				insert into projectdonate values(
				donate_seq.nextVal,#{memberNo},#{projectNo},#{productNo},#{donateMoney},'선결제',
				sysdate
				)
			</when>
			<otherwise>
				insert into projectdonate values(
				donate_seq.nextVal,#{memberNo},#{projectNo},null,#{donateMoney},'선결제',
				sysdate
				)
			</otherwise>
		</choose>
	</insert>

	<!-- 후원 추가 1 (상품 빼기) -->
	<update id="prodput" parameterType="dvo">
		update product
		set productCnt
		= productCnt-1
		where productNo=#{productNo}
	</update>

	<!-- 후원 추가 1 (돈 빼기) -->
	<update id="donateMoney" parameterType="HashMap">
		update member
		set
		memberCash = memberCash - #{donateMoney}
		where memberNo=#{memberNo}
	</update>

	<!-- 후원 추가 (후원자 수 증가) -->
	<update id="projectFundCnt" parameterType="dvo">
		update project
		set
		projectFundCnt=projectFundCnt+1
		where projectNo=#{projectNo}
	</update>

	<!-- 후원 추가(모인 금액 업데이트) -->
	<update id="projectCurCost" parameterType="dvo">
		update project set
		projectCurCost=projectCurCost+#{donateMoney}
		where
		projectNo=#{projectNo}
	</update>

	<!-- 후원 취소2 (행 삭제) : 세션에서 가져온 회원 번호와 후원 번호가 일치해야 삭제가 됨 -->
	<delete id="cancle" parameterType="dvo">
		delete
		from projectDonate
		where
		memberNo=#{memberNo} and donateNo=#{donateNo}
	</delete>

	<!-- 후원 취소 2 (돈 반환) -->
	<update id="returnMoney" parameterType="HashMap">
		update member
		set
		memberCash = memberCash + #{donateMoney}
		where memberNo=#{memberNo}
	</update>

	<!-- 후원 취소를 하기 위해 취소할 후원 프로젝트의 돈을 가져오는 sql 구문 -->
	<select id="mydonatelist" parameterType="dvo" resultType="int">
		select
		donateMoney
		from projectDonate
		where memberNo=#{memberNo} and
		donateNo=#{donateNo}
	</select>

	<!-- 후원 취소3(후원자수 감소) -->
	<update id="returnFundCnt" parameterType="dvo">
		update project
		set
		projectFundCnt=projectFundCnt-1
		where projectNo=(select projectNo from
		projectdonate where donateNo=#{donateNo})
	</update>


	<!-- 리스트 현무스 -->
	<select id="list" parameterType="String" resultType="projvo">
		select
		projectNo ,memberNo
		,projectName ,projectCost
		,projectStartDate,
		to_char(projectEndDate,'yyyy-MM-dd') projectEndDate,projectFundCnt,
		projectMainImage,projectStory,projectStep,projectStatus
		,categoryNo,
		projectCurCost from project where projectNo=#{projectNo}
	</select>

	<!-- 1218 수정 폼 view -->
	<select id="modifyview" parameterType="projvo"
		resultType="projvo">
		select projectName, projectMainImage, projectStory from
		project where projectNo=#{projectNo} and memberno=#{memberNo}
	</select>

	<!-- 수정 -->
	<update id="modify" parameterType="projvo" timeout="20">
		update project SET projectName = #{projectName} , projectStory =
		#{projectStory}
		<if test="projectMainImage != null">, projectMainImage=#{projectMainImage}</if>
		WHERE projectNo=#{projectNo}

	</update>

	<!-- 댓글 등록하기 -->
	<insert id="replyInsert" parameterType="replyvo">
		insert into reply values(
		reply_seq.nextVal,#{replyContent},sysdate,
		#{projectNo},#{memberNo}
		)
	</insert>
	<!-- 댓글 ResultMap -->


	<resultMap type="replyvo" id="rvo_Result">
		<id property="replyNo" column="replyNo" />
		<result column="replyContent" property="replyContent"
			javaType="String" />
		<result column="replyDate" property="replyDate"
			javaType="String" />
		<result column="projectNo" property="projectNo" javaType="int" />
		<association property="mvo_Result" column="memberNo"
			javaType="mvo">
			<id property="memberNo" column="memberNo" />
			<result column="memberName" property="memberName" />
			<result column="memberImage" property="memberImage" />
		</association>
	</resultMap>

	<!-- 댓글 리스트 -->
	<select id="replyList" parameterType="String"
		resultMap="rvo_Result">
		select
		r.replyContent,to_char(r.replyDate,'yyyy-MM-dd')
		replyDate,r.replyNo,
		m.memberName, r.projectNo, m.memberImage
		from reply
		r,member
		m
		where
		m.memberNo=r.memberNo and r.projectNo=#{projectNo}
		order
		by
		replyDate
	</select>

	<!-- 후원취소했을 때, 선물 반환 -->
	<update id="prodout" parameterType="dvo">
		update product
		set productCnt
		= productCnt+1
		where productNo=#{productNo}
	</update>

	<!-- 인기 프로젝트 리스트 (후원자 수) -->
	<select id="popularList" resultType="projvo">
		select
		projectMainImage,projectNo, r
		from (
		select
		projectNo,projectMainImage,projectFundCnt, ROW_NUMBER() OVER(ORDER BY
		projectFundCnt desc) as r
		from project
		where projectFundCnt is not null
		and ProjectStatus=2 and
		sysdate>=projectStartDate
		)
		where r between 1 and
		8
	</select>

	<!-- 새로운 프로젝트 리스트 -->
	<select id="newList" resultType="projvo">
		select
		projectMainImage,projectNo, r
		from (
		select
		projectNo,projectMainImage,projectFundCnt, ROW_NUMBER() OVER(ORDER BY
		projectStartDate desc) as r
		from project
		where projectStartDate is not
		null and ProjectStatus=2 and
		sysdate>=projectStartDate
		)
		where r between
		1 and 8
	</select>

	<!-- 마감임박 프로젝트 -->
	<select id="deadlineList" resultType="projvo">
		select
		projectMainImage,projectNo, r
		from(
		select
		projectNo,projectMainImage,PROJECTSTARTDATE, ROW_NUMBER() OVER(ORDER
		BY projectEndDate asc) as r
		from project
		where projectEndDate is not
		null and ProjectStatus=2 and
		sysdate>=projectStartDate
		)
		where r between
		1 and 8
	</select>

	<!-- 회원가입 -->
	<insert id="addMember" parameterType="mvo">
		insert into member values(
		member_seq.nextVal,#{memberId},#{memberPwd},#{memberName},#{memberAddr},#{memberPhone},#{memberEmail},
		#{memberGender},#{memberAge},#{memberAccount},#{memberImage},2,0,1
		)
	</insert>

	<!-- 회원정보 수정을 위해 회원정보를 가져옴 -->
	<select id="viewmember" parameterType="String" resultType="mvo">
		select memberName, memberAddr, memberPhone, memberEmail, memberAge,
		memberAccount
		from member where memberId=#{memberId}
	</select>

	<!-- 재검토 요청 1218 -->
	<update id="request" parameterType="int">
		update project set
		projectStatus=1 where projectNo=#{projectNo} and projectStatus=4
	</update>

	<!-- 검토 거부당한 프로젝트 삭제 1218 -->
	<delete id="proddel" parameterType="int">
		delete from product where
		projectNo=#{projectNo}
	</delete>

	<delete id="prodel" parameterType="int">
		delete from project where
		projectNo=#{projectNo} and projectStatus=4
	</delete>
	<!-- 캐쉬충전소 리스트 -->
	<select id="cashlist" parameterType="mvo" resultType="mvo">
		select
		memberCash, memberName from member
		where memberNo=#{memberNo}
	</select>

	<!-- 캐쉬충전소 충전 -->
	<update id="cashcharge" parameterType="mvo">
		update member set
		memberCash = memberCash + #{memberCash}
		where memberNo=#{memberNo}
	</update>

	<!-- 아이디 중복체크 -->
	<select id="memberIdCheck" parameterType="HashMap"
		resultType="Integer">
		select count (*)
		from member
		where memberId=#{memberId}
	</select>

	<!-- 후원 취소시 프로젝트 후원금 차감 1219 추가 -->
	<update id="pmoneyminus" parameterType="dvo">
		update project set
		projectCurCost=projectCurCost-#{donateMoney}
		where projectNo=(select
		projectNo from projectDonate where donateNo=#{donateNo})
	</update>

	<!-- 카테고리명 나오게 하기 -->
	<select id="categoryName" parameterType="Integer"
		resultType="String">
		select categoryName
		from category
		where
		categoryNo=#{categoryNo}
	</select>

	<!-- 서브 카테고리명 나오게 하기 -->
	<select id="subCategoryName" parameterType="Integer"
		resultType="String">
		select SubCategoryName
		from SubCategory
		where
		SubCategoryNo=#{SubCategoryNo}
	</select>

	<!-- 헤더에 사용자 이미지/캐시 나오게 하기 -->
	<select id="userInfo" parameterType="String" resultType="mvo">
		select
		memberImage, memberCash, memberGrant
		from member
		where
		memberId=#{memberId}
	</select>

	<!-- 댓글 수정 -->
	<update id="commodify" parameterType="Hashmap">
		update reply set replyContent=#{replyContent} where memberNo=#{memberNo} and
		replyNo=#{replyNo}
	</update>
	<!-- 댓글 수정 팝업 -->
	<select id="commodi" parameterType="Hashmap"
		resultType="replyvo">
		select replyNo, replyContent, to_char(replyDate,'yyyy-MM-dd') replyDate,
		projectNo, memberNo from reply where memberNo=#{memberNo} and
		replyNo=#{replyNo}
	</select>
	<!-- 댓글 삭제 -->
	<delete id="comdelete" parameterType="int">
		delete from reply where memberNo=#{memberNo} and replyNo=#{replyNo}
	</delete>
	<!-- 상세보기 관심별 리스트 -->
	<select id="listByCategory" parameterType="String"
		resultType="projvo">
		select projectName,projectMainImage, projectNo from project where
		categoryNo=#{categoryNo}
	</select>
	
	<!-- 내 프로젝트를 후원한 사람 명단 보기 -->
	<select id="projectDonateList" parameterType="int" resultType="mvo">
		select projectNo,m.memberNo,memberId,memberName,memberAddr,memberPhone,memberEmail,memberGender,memberAge,memberAccount,memberImage
		from member m,projectDonate d
		where d.projectNo=#{projectNo} and m.memberNo=d.memberNo
	</select>
</mapper>